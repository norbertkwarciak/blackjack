{"version":3,"sources":["logic/deck.js","logic/score.js","components/Button.js","components/Confirm.js","components/Modal.js","components/Card.js","components/Player.js","App.js","logic/winner.js","serviceWorker.js","index.js"],"names":["values","suits","countSum","items","map","i","value","reduce","prev","curr","getScore","cards","score","aces","filter","c","label","length","firstAce","restOfAces","ace","updatedCards","every","Button","text","action","disabled","className","cx","onClick","Confirm","question","close","Modal","isOpen","children","overlayClassName","onRequestClose","closeTimeoutMS","appElement","document","body","SUITS_MAP","diamonds","hearts","clubs","spades","suitIcon","icon","xl","Card","card","suit","red","Player","player","isDealer","index","key","App","useState","deck","setDeck","setPlayer","dealer","setDealer","modalVisible","handleModal","message","setMessage","gameOver","endGame","getRandomCard","randomIndex","Math","floor","random","randomCard","splice","updatedDeck","startGame","playerCard1","dealerCard1","playerCard2","playerStartingHand","dealerStartingHand","dealCards","v","s","a","b","concat","dealerHit","push","useEffect","newCards","newPlayer","Object","assign","d","draw","msg","winner","p","getWinner","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcd6890c.chunk.js","sourcesContent":["const values = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'D', 'K', 'A'];\nconst suits = ['diamonds', 'spades', 'hearts', 'clubs'];\n\nexport const getFigureValue = value => {\n  if (value === 'A')\n    return 11;\n  else if (value === 'J' || value === 'D' || value === 'K')\n    return 10;\n  else return value;\n}\n\nexport const getDeck = () => {\n  const deck = values.map(v => {\n    return suits.map(s => ({value: getFigureValue(v), label: v, suit: s}));\n  })\n\n  return deck.reduce((a, b) => a.concat(b), []);\n}\n","const countSum = items => items\n  .map(i => i.value)\n  .reduce((prev, curr) => prev + curr, 0);\n\nconst FIRST_ACE_VALUE = 11;\nconst OTHER_ACE_VALUE = 1;\n\nexport const getScore = cards => {\n  let score;\n  const aces = cards.filter(c => c.label === 'A');\n\n  if (aces.length > 1) {\n    const [firstAce, ...restOfAces] = aces;\n    firstAce.value = FIRST_ACE_VALUE;\n    restOfAces.map(ace => ace.value = OTHER_ACE_VALUE);\n\n    const updatedCards = cards.every(c => c.label === 'A')\n      ? [firstAce, ...restOfAces]\n      : [firstAce, ...restOfAces, ...cards.filter(c => c.label !== 'A')];\n\n    score = countSum(updatedCards);\n  } else score = countSum(cards);\n\n  return score;\n}","import React from 'react';\nimport cx    from 'classnames';\n\nimport './Button.sass';\n\nexport default function Button({text, action, disabled, className}) {\n  return (\n    <button\n      className={cx(\"Button\", className)}\n      onClick={action}\n      disabled={disabled}\n    >\n      {text}\n    </button>\n  )\n}\n","import React  from 'react';\nimport Button from 'components/Button';\n\nimport './Confirm.sass';\n\nexport default function Confirm({question, action, close}) {\n  return (\n    <div className=\"Confirm\">\n      <p>{question}</p>\n      <div className=\"Confirm__btns\">\n        <Button\n          action={action}\n          text=\"Yes\"\n        />\n        <Button\n          action={close}\n          text=\"No\"\n        />\n      </div>\n    </div>\n  )\n}\n","import React  from 'react';\nimport RModal from 'react-modal';\n\nimport './Modal.sass';\n\nexport default function Modal({isOpen, children, close}) {\n  return (\n      <RModal\n        className=\"Modal\"\n        overlayClassName=\"Modal__overlay\"\n        isOpen={isOpen}\n        onRequestClose={close}\n        closeTimeoutMS={500}\n        appElement={document.body}\n      >\n        {children}\n      </RModal>\n  )\n}\n","import React from 'react';\nimport cx    from 'classnames';\n\nimport './Card.sass';\n\nconst SUITS_MAP = {\n  diamonds: '♦',\n  hearts: '♥',\n  clubs: '♣',\n  spades: '♠'\n}\n\nconst suitIcon = (icon, xl = false) => <div className={cx(\"Card__suit\", {xl})}>{icon}</div>\n\nexport default function Card({card: {label, suit}}) {\n  const red = suit === 'diamonds' || suit === 'hearts';\n  return (\n    <div className={cx(\"Card\", {red})}>\n      <div className=\"Card__value\">\n        <span>{label}</span>\n        {suitIcon(SUITS_MAP[suit])}\n      </div>\n      {suitIcon(SUITS_MAP[suit], true)}\n      <div className=\"Card__value Card__value--rotated\">\n        <span>{label}</span>\n        {suitIcon(SUITS_MAP[suit])}\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport Card  from 'components/Card';\n\nimport './Player.sass';\n\nexport default function Player({player: {score, cards}, isDealer = false}) {\n  return (\n    <div className=\"Player\">\n      <span>{isDealer ? 'Dealer\\'s hand:' : 'Player\\'s hand:'} {score}</span>\n      <div className=\"Player__cards\">\n        {cards.map((c, index) => (\n          <Card card={c} key={index} />\n        ))}\n      </div>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react';\nimport { getDeck }                    from 'logic/deck';\nimport { getScore }                   from 'logic/score';\nimport { getWinner }                  from 'logic/winner';\nimport Button                         from 'components/Button';\nimport Confirm                        from 'components/Confirm';\nimport Modal                          from 'components/Modal';\nimport Player                         from 'components/Player';\n\nimport './App.sass';\n\nconst BLACKJACK = 21;\nconst DEALER_LIMIT = 19;\n\nfunction App() {\n  const [deck, setDeck] = useState([]);\n  const [player, setPlayer] = useState(null);\n  const [dealer, setDealer] = useState(null);\n  const [modalVisible, handleModal] = useState(false);\n  const [message, setMessage] = useState('');\n  const [gameOver, endGame] = useState(false);\n\n  const getRandomCard = deck => {\n    const randomIndex = Math.floor(Math.random() * deck.length);\n    const randomCard = deck[randomIndex];\n\n    deck.splice(randomIndex, 1);\n\n    return { randomCard, updatedDeck: deck };\n  }\n\n  const dealCards = deck => {\n    const playerCard1 = getRandomCard(deck);\n    const dealerCard1 = getRandomCard(playerCard1.updatedDeck);\n    const playerCard2 = getRandomCard(dealerCard1.updatedDeck);\n\n    const playerStartingHand = [playerCard1.randomCard, playerCard2.randomCard];\n    const dealerStartingHand = [dealerCard1.randomCard];\n\n    const player = {\n      cards: playerStartingHand,\n      score: getScore(playerStartingHand)\n    };\n    const dealer = {\n      cards: dealerStartingHand,\n      score: getScore(dealerStartingHand)\n    };\n\n    return {\n      updatedDeck: playerCard2.updatedDeck,\n      player,\n      dealer\n    };\n  }\n\n  const startGame = () => {\n    const cards = getDeck();\n    const { updatedDeck, player, dealer } = dealCards(cards);\n\n    setDeck(updatedDeck);\n    setPlayer(player);\n    setDealer(dealer);\n    endGame(false);\n    modalVisible && handleModal(false);\n  }\n\n  const hit = () => {\n    const { randomCard, updatedDeck } = getRandomCard(deck);\n\n    const newCards = [...player.cards, randomCard];\n    const newPlayer = Object.assign({}, {\n      cards: newCards,\n      score: getScore(newCards)\n    })\n\n    if (newPlayer.score > BLACKJACK) {\n      setPlayer(newPlayer);\n      setMessage('You lost!');\n      endGame(true);\n    } else {\n      setPlayer(newPlayer);\n      setDeck(updatedDeck);\n    }\n  }\n\n  const dealerHit = (dealer, deck) => {\n    const { randomCard, updatedDeck } = getRandomCard(deck);\n\n    dealer.cards.push(randomCard);\n    dealer.score = getScore(dealer.cards);\n\n    setDealer(dealer);\n    setDeck(updatedDeck);\n\n    return { dealer, updatedDeck }\n  }\n\n  const stand = () => {\n    if (!gameOver) {\n      const randomCard = getRandomCard(deck);\n\n      const d = dealer;\n      d.cards.push(randomCard.randomCard);\n      d.score = getScore(d.cards);\n\n      while(dealer.score < DEALER_LIMIT) {\n        const draw = dealerHit(d, deck);\n\n        setDealer(draw.dealer);\n        setDeck(draw.updatedDeck);\n      }\n\n      if(d.score > BLACKJACK) {\n        setDeck(randomCard.updatedDeck);\n        setDealer(d);\n        endGame(true);\n        setMessage('You win!');\n      } else {\n        const winner = getWinner(player, d);\n        let msg;\n\n        if (winner === 'dealer') {\n          msg = 'Dealer is the winner';\n        } else if (winner === 'player') {\n          msg = 'You win!';\n        } else {\n          msg = 'Draw';\n        }\n\n        setDeck(randomCard.updatedDeck);\n        setDealer(d);\n        endGame(true);\n        setMessage(msg);\n      }\n    } else {\n      setMessage('Game over!');\n    }\n  }\n\n  useEffect(() => startGame(), []);\n\n  return (\n    <div className=\"Blackjack\">\n      <header>\n        <div className=\"container\">\n          <h2>Blackjack</h2>\n        </div>\n      </header>\n      <div className=\"Blackjack__game\">\n        <div className=\"container\">\n          <div className=\"Blackjack__table\">\n            {gameOver && <p className=\"Blackjack__message\">{message}</p>}\n            {player && <Player player={player} />}\n\n            <div className=\"Blackjack__actions\">\n              <Button\n                action={gameOver ? startGame : () => handleModal(true)}\n                text=\"New Game\"\n              />\n              <Button\n                className={{disabled: gameOver}}\n                action={hit}\n                disabled={gameOver}\n                text=\"Hit\"\n              />\n              <Button\n                className={{disabled: gameOver}}\n                action={stand}\n                disabled={gameOver}\n                text=\"Stand\"\n              />\n            </div>\n\n            {dealer &&\n              <Player\n                player={dealer}\n                isDealer\n              />\n            }\n          </div>\n        </div>\n      </div>\n\n      {modalVisible &&\n        <Modal\n          isOpen={modalVisible}\n          close={() => handleModal(false)}\n        >\n          <Confirm\n            question=\"Would you like to start a new game?\"\n            action={startGame}\n            close={() => handleModal(false)}\n          />\n        </Modal>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","export const getWinner = (p, d) => {\n  if (d.score > p.score) {\n    return 'dealer';\n  } else return 'player';\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React              from 'react';\nimport ReactDOM           from 'react-dom';\nimport App                from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}